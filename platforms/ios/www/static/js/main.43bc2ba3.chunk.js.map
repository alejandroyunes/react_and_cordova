{"version":3,"sources":["components/SecondPage.js","components/NavBar.js","components/Image.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["SecondPage","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","reversed","split","reverse","join","document","getElementById","innerHTML","preventDefault","className","onSubmit","type","onChange","id","React","Component","NavBar","to","imagesPath","image1","image2","Image","open","toggleImage","getImageName","imageName","style","width","src","onClick","Home","txt","count","result","match","i","length","indexOf","toLowerCase","r","RegExp","countNum","exec","alert","App","exact","path","component","Error","Boolean","window","location","hostname","startApp","ReactDOM","render","cordova","addEventListener","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43bc2ba3.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\n\r\nclass SecondPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n\r\n        let txt = this.state.value;\r\n        let reversed = txt.split(\"\").reverse().join(\"\");\r\n        document.getElementById(\"output\").innerHTML = reversed;\r\n       \r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\">\r\n                    <br /><br />\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label>\r\n                            Ingrese el texto:\r\n                                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n                        </label>\r\n                        <input type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                    <h2 id=\"output\"></h2>\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SecondPage\r\n\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport '../App.css';\r\nimport {Link} from 'react-router-dom'\r\nimport SecondPage from './SecondPage'\r\n\r\nexport default class NavBar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            \r\n<>\r\n            <nav className=\"navbar\">\r\n                <div className=\"nav-center\">\r\n                    <div className=\"nav-header\">\r\n                        <Link to=\"/\">\r\n                            <p>Prueba</p>\r\n                        </Link>\r\n                        \r\n                      \r\n                    </div>\r\n         \r\n                    <ul className=\"nav-links show-nav\">\r\n                        <li>\r\n                            <Link to =\"/\">Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to =\"/SecondPage\">SecondPage</Link>\r\n                        </li>\r\n                    </ul>   \r\n                </div>\r\n\r\n                \r\n            </nav>\r\n\r\n\r\n</>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\n\r\nconst imagesPath = {\r\n    image1: \"https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=753&q=80\",\r\n    image2: \"https://images.unsplash.com/photo-1495954484750-af469f2f9be5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80\"\r\n}\r\n\r\nexport default class Image extends Component {\r\n\r\n    state = { open: true };\r\n\r\n\r\n\r\n    toggleImage = () => {\r\n        this.setState(state => ({ open: !state.open }))\r\n    }\r\n\r\n    getImageName = () => this.state.open ? 'image1' : 'image2'\r\n\r\n    render() {\r\n        const imageName = this.getImageName();\r\n        return (\r\n            <div>\r\n                <br /><br />\r\n                <img style={{ width: '100%' }} src={imagesPath[imageName]} />\r\n                <button onClick={this.toggleImage}>click to change</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport '../App.css';\r\n\r\nimport Image from './Image'\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { value: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n\r\n        let txt = this.state.value;\r\n\r\n        let count = 0;\r\n\r\n        let vowels = \"aeiou\";\r\n        let reg = /\\d+/g;\r\n        let result = txt.match(reg);\r\n\r\n\r\n        for (var i = 0; i < txt.length; i++) {\r\n            if (vowels.indexOf(txt[i].toLowerCase()) > -1) {\r\n                count++;\r\n\r\n            }\r\n        }\r\n\r\n        let r = new RegExp('\\\\d', 'g')\r\n            , countNum = 0\r\n\r\n        while (r.exec(result)) countNum++;\r\n\r\n\r\n\r\n        alert(\"la cantidad de vocales son: \" + count + \" y de n√∫meros es: \" + countNum);\r\n\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"App\">\r\n                    <br /><br />\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <label>\r\n                            Ingrese el texto:\r\n                                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\r\n                        </label>\r\n                        <input type=\"submit\" value=\"Submit\" />\r\n                    </form>\r\n                </div>\r\n                <Image/>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home\r\n\r\n\r\n\r\n","import React from 'react';\n\nimport './App.css';\n\nimport { Route, Switch } from \"react-router-dom\";\n\nimport NavBar from './components/NavBar';\n\nimport Home from './components/Home';\nimport SecondPage from './components/SecondPage';\n\nfunction App() {\n  return (\n    <>\n\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/SecondPage\" component={SecondPage} />\n  \n        <Route component={Error} />\n\n      </Switch>\n      \n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter as Router } from 'react-router-dom'\n\n\nconst startApp = ()=> {\n    ReactDOM.render(\n\n        <Router>\n            <App />\n        </Router>\n\n\n        , document.getElementById('root'));\n }\n\n if (window.cordova){\n     document.addEventListener('deviceready', startApp, false)\n }else {\n     startApp()\n }\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}